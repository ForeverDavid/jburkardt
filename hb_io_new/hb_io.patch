diff --exclude hb_file.hpp --exclude '*~' --exclude CVS --exclude Makefile --exclude '*.m' -wBuNr hb_io/hb_io.cpp hb_io_patched/hb_io.cpp
--- hb_io/hb_io.cpp	2016-09-21 17:10:33.869827500 +0200
+++ hb_io_patched/hb_io.cpp	2016-09-21 17:10:56.486088900 +0200
@@ -2,13 +2,33 @@
 # include <cstdlib>
 # include <cstring>
 # include <ctime>
-# include <fstream>
+# include <sstream>
 # include <iomanip>
 # include <iostream>
+# include <stdexcept>
+
+# include "hb_io.hpp"
+
+namespace hb_io
+{
 
 using namespace std;
 
-# include "hb_io.hpp"
+double atof_fortran(char* s)
+{
+    for (char* p = s; *p != '\0'; ++p)
+    {
+        switch (*p)
+        {
+        case 'd':
+        case 'D':
+            *p = 'E';
+            break;
+        }
+    }
+
+    return atof(s);
+}
 
 //****************************************************************************80
 
@@ -332,7 +352,7 @@
           klo = khi + 1;
           khi = i4_min ( klo + w - 1, strlen ( line ) );
           s = s_substring ( line, klo, khi );
-          exact[j-1] = atof ( s );
+          exact[j-1] = atof_fortran ( s );
         }
       }
     }
@@ -607,10 +627,12 @@
     }
     else
     {
-      cerr << "\n";
-      cerr << "HB_FILE_READ - Fatal error!\n";
-      cerr << "  Illegal value of MXTYPE character 3!\n";
-      exit ( 1 );
+      ostringstream os;
+      
+      os << "HB_FILE_READ - Fatal error!\n";
+      os << "  Illegal value of MXTYPE character 3!\n";
+      
+      throw runtime_error(os.str());
     }
 
   }
@@ -637,10 +659,12 @@
     }
     else
     {
-      cerr << "\n";
-      cerr << "HB_FILE_READ - Fatal error!\n";
-      cerr << "  Illegal value of MXTYPE character 3!\n";
-      exit ( 1 );
+      ostringstream os;
+
+      os << "HB_FILE_READ - Fatal error!\n";
+      os << "  Illegal value of MXTYPE character 3!\n";
+      
+      throw runtime_error(os.str());
     }
 
     hb_values_read ( input, *valcrd, *mxtype, *nnzero, *neltvl, 
@@ -694,11 +718,13 @@
     }
     else
     {
-      cerr << "\n";
-      cerr << "HB_FILE_READ - Fatal error!\n";
-      cerr << "  Illegal combination of RHSTYP character 1\n";
-      cerr << "  and MXTYPE character 3!\n";
-      exit ( 1 );
+      ostringstream os;
+
+      os << "HB_FILE_READ - Fatal error!\n";
+      os << "  Illegal combination of RHSTYP character 1\n";
+      os << "  and MXTYPE character 3!\n";
+      
+      throw runtime_error(os.str());
     }
 
     hb_rhs_read ( input, *nrow, *nnzero, *nrhs, *nrhsix, 
@@ -1003,7 +1029,7 @@
           klo = khi + 1;
           khi = i4_min ( klo + w - 1, strlen ( line ) );
           s = s_substring ( line, klo, khi );
-          guess[j-1] = atof ( s );
+          guess[j-1] = atof_fortran ( s );
         }
       }
     }
@@ -1321,10 +1347,12 @@
 
   if ( input.eof() )
   {
-    cerr << "\n";
-    cerr << "HB_HEADER_READ - Fatal error!\n";
-    cerr << "  I/O error reading header line 1.\n";
-    exit ( 1 );
+    ostringstream os;
+    
+    os << "HB_HEADER_READ - Fatal error!\n";
+    os << "  I/O error reading header line 1.\n";
+    
+    throw runtime_error(os.str());
   }
 
   *title = s_substring ( line, 1, 72 );
@@ -1339,10 +1367,12 @@
 
   if ( input.eof() )
   {
-    cerr << "\n";
-    cerr << "HB_HEADER_READ - Fatal error!\n";
-    cerr << "  I/O error reading header line 2.\n";
-    exit ( 1 );
+    ostringstream os;
+
+    os << "HB_HEADER_READ - Fatal error!\n";
+    os << "  I/O error reading header line 2.\n";
+    
+    throw runtime_error(os.str());
   }
 
   field = s_substring ( line,  1, 14 );
@@ -1366,10 +1396,12 @@
   
   if ( input.eof() )
   {
-    cerr << "\n";
-    cerr << "HB_HEADER_READ - Fatal error!\n";
-    cerr << "  I/O error reading header line 3.\n";
-    exit ( 1 );
+    ostringstream os;
+    
+    os << "HB_HEADER_READ - Fatal error!\n";
+    os << "  I/O error reading header line 3.\n";
+    
+    throw runtime_error(os.str());
   }
 
   *mxtype = s_substring ( line, 1, 3 );
@@ -1393,10 +1425,12 @@
   
   if ( input.eof() )
   {
-    cerr << "\n";
-    cerr << "HB_HEADER_READ - Fatal error!\n";
-    cerr << "  I/O error reading header line 4.\n";
-    exit ( 1 );
+    ostringstream os;
+    
+    os << "HB_HEADER_READ - Fatal error!\n";
+    os << "  I/O error reading header line 4.\n";
+    
+    throw runtime_error(os.str());
   }
 
   *ptrfmt = s_substring ( line,  1, 16 );
@@ -1419,10 +1453,12 @@
   
     if ( input.eof ( ) )
     {
-      cerr << "\n";
-      cerr << "HB_HEADER_READ - Fatal error!\n";
-      cerr << "  I/O error reading header line 5.\n";
-      exit ( 1 );
+      ostringstream os;
+      
+      os << "HB_HEADER_READ - Fatal error!\n";
+      os << "  I/O error reading header line 5.\n";
+      
+      throw runtime_error(os.str());
     }
 
     *rhstyp = s_substring ( line, 1, 3 );
@@ -1837,7 +1873,7 @@
           klo = khi + 1;
           khi = i4_min ( klo + w - 1, strlen ( line ) );
           s = s_substring ( line, klo, khi );
-          rhsval[j-1] = atof ( s );
+          rhsval[j-1] = atof_fortran ( s );
         }
       }
     }
@@ -1908,7 +1944,7 @@
             klo = khi + 1;
             khi = i4_min ( klo + w - 1, strlen ( line ) );
             s = s_substring ( line, klo, khi );
-            rhsvec[j-1] = atof ( s );
+            rhsvec[j-1] = atof_fortran ( s );
           }
         }
       }
@@ -1934,16 +1970,18 @@
             klo = khi + 1;
             khi = i4_min ( klo + w - 1, strlen ( line ) );
             s = s_substring ( line, klo, khi );
-            rhsval[j-1] = atof ( s );
+            rhsval[j-1] = atof_fortran ( s );
           }
         }
       }
       else
       {
-        cerr << "\n";
-        cerr << "HB_RHS_READ - Fatal error!\n";
-        cerr << "  Illegal value of MXTYPE character 3!\n";
-        exit ( 1 );
+        ostringstream os;
+        
+        os << "HB_RHS_READ - Fatal error!\n";
+        os << "  Illegal value of MXTYPE character 3!\n";
+        
+        throw runtime_error(os.str());
       }
 
     }
@@ -1952,10 +1990,12 @@
 //
     else
     {
-      cerr << "\n";
-      cerr << "HB_RHS_READ - Fatal error!\n";
-      cerr << "  Illegal value of RHSTYP character 1!\n";
-      exit ( 1 );
+      ostringstream os;
+      
+      os << "HB_RHS_READ - Fatal error!\n";
+      os << "  Illegal value of RHSTYP character 1!\n";
+      
+      throw runtime_error(os.str());
     }
 
   }
@@ -2187,19 +2227,23 @@
       }
       else
       {
-        cerr << "\n";
-        cerr << "HB_RHS_WRITE - Fatal error!\n";
-        cerr << "  Illegal value of MXTYPE character 3!\n";
-        exit ( 1 );
+        ostringstream os;
+        
+        os << "HB_RHS_WRITE - Fatal error!\n";
+        os << "  Illegal value of MXTYPE character 3!\n";
+        
+        throw runtime_error(os.str());
       }
     }
   }
   else
   {
-    cerr << "\n";
-    cerr << "HB_RHS_WRITE - Fatal error!\n";
-    cerr << "  Illegal value of RHSTYP character 1!\n";
-    exit ( 1 );
+    ostringstream os;
+    
+    os << "HB_RHS_WRITE - Fatal error!\n";
+    os << "  Illegal value of RHSTYP character 1!\n";
+    
+    throw runtime_error(os.str());
   }
 
   return;
@@ -2314,10 +2358,12 @@
   }
   else
   {
-    cerr << "\n";
-    cerr << "HB_STRUCTURE_PRINT - Fatal error!\n";
-    cerr << "  Illegal value of MXTYPE character #3 = " << mxtype[2] << "\n";;
-    exit ( 1 );
+    ostringstream os;
+    
+    os << "HB_STRUCTURE_PRINT - Fatal error!\n";
+    os << "  Illegal value of MXTYPE character #3 = " << mxtype[2] << "\n";;
+    
+    throw runtime_error(os.str());
   }
 
   return;
@@ -2497,10 +2543,12 @@
   }
   else
   {
-    cerr << "\n";
-    cerr << "HB_STRUCTURE_READ - Fatal error!\n";
-    cerr << "  Illegal value of MXTYPE character 3.\n";
-    exit ( 1 );
+    ostringstream os;
+    
+    os << "HB_STRUCTURE_READ - Fatal error!\n";
+    os << "  Illegal value of MXTYPE character 3.\n";
+    
+    throw runtime_error(os.str());
   }
 
   return;
@@ -2636,10 +2684,12 @@
   }
   else
   {
-    cerr << "\n";
-    cerr << "HB_STRUCTURE_WRITE - Fatal error!\n";
-    cerr << "  Illegal value of MXTYPE character 3.\n";
-    exit ( 1 );
+    ostringstream os;
+    
+    os << "HB_STRUCTURE_WRITE - Fatal error!\n";
+    os << "  Illegal value of MXTYPE character 3.\n";
+    
+    throw runtime_error(os.str());
   }
 
   return;
@@ -2827,10 +2877,12 @@
   }
   else
   {
-    cerr << "\n";
-    cerr << "HB_VALUES_PRINT - Fatal error!\n";
-    cerr << "  Illegal value of MXTYPE character 3 = " << mxtype[2] << "\n";
-    exit ( 1 );
+    ostringstream os;
+    
+    os << "HB_VALUES_PRINT - Fatal error!\n";
+    os << "  Illegal value of MXTYPE character 3 = " << mxtype[2] << "\n";
+    
+    throw runtime_error(os.str());
   }
 
   return;
@@ -2938,10 +2990,12 @@
     }
     else
     {
-      cerr << "\n";
-      cerr << "HB_VALUES_READ - Fatal error!\n";
-      cerr << "  Illegal value of MXTYPE character 3.\n";
-      exit ( 1 );
+      ostringstream os;
+      
+      os << "HB_VALUES_READ - Fatal error!\n";
+      os << "  Illegal value of MXTYPE character 3.\n";
+      
+      throw runtime_error(os.str());
     }
 
     jhi = 0;
@@ -2963,7 +3017,7 @@
         klo = khi + 1;
         khi = i4_min ( klo + w - 1, strlen ( line ) );
         s = s_substring ( line, klo, khi );
-        values[j-1] = atof ( s );
+        values[j-1] = atof_fortran ( s );
       }
     }
   }
@@ -3061,10 +3115,12 @@
     }
     else
     {
-      cerr << "\n";
-      cerr << "HB_VALUES_WRITE - Fatal error!\n";
-      cerr << "  Illegal value of MXTYPE character 3.\n";
-      exit ( 1 );
+      ostringstream os;
+      
+      os << "HB_VALUES_WRITE - Fatal error!\n";
+      os << "  Illegal value of MXTYPE character 3.\n";
+      
+      throw runtime_error(os.str());
     }
 
     jhi = 0;
@@ -3281,7 +3337,7 @@
 }
 //****************************************************************************80
 
-void i4vec_print ( int n, int a[], string title )
+void i4vec_print ( int n, int a[], const string& title )
 
 //****************************************************************************80
 //
@@ -3328,7 +3384,7 @@
 }
 //****************************************************************************80
 
-void i4vec_print_part ( int n, int a[], int max_print, string title )
+void i4vec_print_part ( int n, int a[], int max_print, const string& title )
 
 //****************************************************************************80
 //
@@ -3424,7 +3480,7 @@
 }
 //****************************************************************************80
 
-void r8mat_print ( int m, int n, double a[], string title )
+void r8mat_print ( int m, int n, double a[], const string& title )
 
 //****************************************************************************80
 //
@@ -3469,7 +3525,7 @@
 //****************************************************************************80
 
 void r8mat_print_some ( int m, int n, double a[], int ilo, int jlo, int ihi,
-  int jhi, string title )
+  int jhi, const string& title )
 
 //****************************************************************************80
 //
@@ -3510,7 +3566,7 @@
 //    Input, string TITLE, a title.
 //
 {
-# define INCX 5
+  const int INCX = 5;
 
   int i;
   int i2hi;
@@ -3591,11 +3647,10 @@
   }
 
   return;
-# undef INCX
 }
 //****************************************************************************80
 
-void r8vec_print ( int n, double a[], string title )
+void r8vec_print ( int n, double a[], const string& title )
 
 //****************************************************************************80
 //
@@ -3643,7 +3698,7 @@
 }
 //****************************************************************************80
 
-void r8vec_print_part ( int n, double a[], int max_print, string title )
+void r8vec_print_part ( int n, double a[], int max_print, const string& title )
 
 //****************************************************************************80
 //
@@ -4141,18 +4196,22 @@
 
   if ( paren_sum != 0 )
   {
-    cerr << "\n";
-    cerr << "S_TO_FORMAT - Fatal error!\n";
-    cerr << "  Parentheses mismatch.\n";
-    exit ( 1 );
+    ostringstream os;
+    
+    os << "S_TO_FORMAT - Fatal error!\n";
+    os << "  Parentheses mismatch.\n";
+    
+    throw runtime_error(os.str());
   }
 
   if ( state < 0 )
   {
-    cerr << "\n";
-    cerr << "S_TO_FORMAT - Fatal error!\n";
-    cerr << "  Parsing error.\n";
-    exit ( 1 );
+    ostringstream os;
+    
+    os << "S_TO_FORMAT - Fatal error!\n";
+    os << "  Parsing error.\n";
+    
+    throw runtime_error(os.str());
   }
 
   if ( *r == 0 )
@@ -4247,20 +4306,20 @@
 //    None
 //
 {
-# define TIME_SIZE 40
+  const int TIME_SIZE = 40;
 
   static char time_buffer[TIME_SIZE];
   const struct tm *tm;
-  size_t len;
   time_t now;
 
   now = time ( NULL );
   tm = localtime ( &now );
 
-  len = strftime ( time_buffer, TIME_SIZE, "%d %B %Y %I:%M:%S %p", tm );
+  strftime ( time_buffer, TIME_SIZE, "%d %B %Y %I:%M:%S %p", tm );
 
   cout << time_buffer << "\n";
 
   return;
-# undef TIME_SIZE
+}
+
 }
diff --exclude hb_file.hpp --exclude '*~' --exclude CVS --exclude Makefile --exclude '*.m' -wBuNr hb_io/hb_io.hpp hb_io_patched/hb_io.hpp
--- hb_io/hb_io.hpp	2016-09-21 17:10:33.881828700 +0200
+++ hb_io_patched/hb_io.hpp	2016-09-21 17:10:56.541094400 +0200
@@ -1,75 +1,87 @@
+#ifndef ___HB_IO__HPP___INCLUDED___
+#define ___HB_IO__HPP___INCLUDED___
+
+# include <fstream>
+# include <string>
+
+namespace hb_io
+{
+
 bool ch_eqi ( char c1, char c2 );
 bool ch_is_digit ( char c );
 bool ch_is_format_code ( char c );
 int ch_to_digit ( char c );
-void hb_exact_read ( ifstream &input, int nrow, int nrhs, int rhscrd, 
+void hb_exact_read ( std::ifstream &input, int nrow, int nrhs, int rhscrd, 
   char *rhsfmt, char *rhstyp, double exact[] );
-void hb_exact_write ( ofstream &output, int nrow, int nrhs, int rhscrd, 
+void hb_exact_write ( std::ofstream &output, int nrow, int nrhs, int rhscrd, 
   char *rhsfmt, char *rhstyp, double exact[] );
-void hb_file_read ( ifstream &input, char **title, char **key, int *totcrd, 
+void hb_file_read ( std::ifstream &input, char **title, char **key, int *totcrd, 
   int *ptrcrd, int *indcrd, int *valcrd, int *rhscrd, char **mxtype, int *nrow, 
   int *ncol, int *nnzero, int *neltvl, char **ptrfmt, char **indfmt, char **valfmt, 
   char **rhsfmt, char **rhstyp, int *nrhs, int *nrhsix, int **colptr, 
   int **rowind, double **values, double **rhsval, int **rhsptr, int **rhsind,  
   double **rhsvec, double **guess, double **exact );
-void hb_file_write ( ofstream &output, char *title, char *key, int totcrd, 
+void hb_file_write ( std::ofstream &output, char *title, char *key, int totcrd, 
   int ptrcrd, int indcrd, int valcrd, int rhscrd, char *mxtype, int nrow, 
   int ncol, int nnzero, int neltvl, char *ptrfmt, char *indfmt, char *valfmt, 
   char *rhsfmt, char *rhstyp, int nrhs, int nrhsix, int colptr[],
   int rowind[], double values[], double rhsval[], int rhsptr[], int rhsind[], 
   double rhsvec[], double guess[], double exact[] );
-void hb_guess_read ( ifstream &input, int nrow, int nrhs, int rhscrd, 
+void hb_guess_read ( std::ifstream &input, int nrow, int nrhs, int rhscrd, 
   char *rhsfmt, char *rhstyp, double guess[] );
-void hb_guess_write ( ofstream &output, int nrow, int nrhs, int rhscrd, 
+void hb_guess_write ( std::ofstream &output, int nrow, int nrhs, int rhscrd, 
   char *rhsfmt, char *rhstyp, double guess[] );
 void hb_header_print ( char *title, char *key, int totcrd, int ptrcrd, 
   int indcrd, int valcrd, int rhscrd, char *mxtype, int nrow, int ncol, 
   int nnzero, int neltvl, char *ptrfmt, char *indfmt, char *valfmt, 
   char *rhsfmt, char *rhstyp, int nrhs, int nrhsix );
-void hb_header_read ( ifstream &input, char **title, char **key, int *totcrd, 
+void hb_header_read ( std::ifstream &input, char **title, char **key, int *totcrd, 
   int *ptrcrd, int *indcrd, int *valcrd, int *rhscrd, char **mxtype, int *nrow, 
   int *ncol, int *nnzero, int *neltvl, char **ptrfmt, char **indfmt, 
   char **valfmt, char **rhsfmt, char **rhstyp, int *nrhs, int *nrhsix );
-void hb_header_write ( ofstream &output, char *title, char *key, int totcrd, 
+void hb_header_write ( std::ofstream &output, char *title, char *key, int totcrd, 
   int ptrcrd, int indcrd, int valcrd, int rhscrd, char *mxtype, int nrow, 
   int ncol, int nnzero, int neltvl, char *ptrfmt, char *indfmt, char *valfmt, 
   char *rhsfmt, char *rhstyp, int nrhs, int nrhsix );
 double *hb_matvec_a_mem ( int nrow, int ncol, int nnzero, int nrhs, 
   int colptr[], int rowind[], double values[], double exact[] );
-void hb_rhs_read ( ifstream &input, int nrow, int nnzero, int nrhs, int nrhsix, 
+void hb_rhs_read ( std::ifstream &input, int nrow, int nnzero, int nrhs, int nrhsix, 
   int rhscrd, char *ptrfmt, char *indfmt, char *rhsfmt, char *mxtype, 
   char *rhstyp, double rhsval[], int rhsind[], int rhsptr[], double rhsvec[] );
-void hb_rhs_write ( ofstream &output, int nrow, int nnzero, int nrhs, int nrhsix, 
+void hb_rhs_write ( std::ofstream &output, int nrow, int nnzero, int nrhs, int nrhsix, 
   int rhscrd, char *ptrfmt, char *indfmt, char *rhsfmt, char *mxtype, 
   char *rhstyp, double rhsval[], int rhsind[], int rhsptr[], double rhsvec[] );
 void hb_structure_print ( int ncol, char *mxtype, int nnzero, int neltvl, 
   int colptr[], int rowind[] );
-void hb_structure_read ( ifstream &input, int ncol, char *mxtype, int nnzero, 
+void hb_structure_read ( std::ifstream &input, int ncol, char *mxtype, int nnzero, 
   int neltvl, int ptrcrd, char *ptrfmt, int indcrd, char *indfmt, 
   int colptr[], int rowind[] );
-void hb_structure_write ( ofstream &output, int ncol, char *mxtype, 
+void hb_structure_write ( std::ofstream &output, int ncol, char *mxtype, 
   int nnzero, int neltvl, char *ptrfmt, char *indfmt, int colptr[], 
   int rowind[] );
 int *hb_ua_colind ( int ncol, int colptr[], int nnzero );
 void hb_values_print ( int ncol, int colptr[], char *mxtype, int nnzero, 
   int neltvl, double values[] );
-void hb_values_read ( ifstream &input, int valcrd, char *mxtype, int nnzero,
+void hb_values_read ( std::ifstream &input, int valcrd, char *mxtype, int nnzero,
   int neltvl, char *valfmt, double values[] );
-void hb_values_write ( ofstream &output, int valcrd, char *mxtype, 
+void hb_values_write ( std::ofstream &output, int valcrd, char *mxtype, 
   int nnzero, int neltvl, char *valfmt, double values[] );
 double *hb_vecmat_a_mem ( int nrow, int ncol, int nnzero, int nrhs, 
   int colptr[], int rowind[], double values[], double exact[] );
 int i4_max ( int i1, int i2 );
 int i4_min ( int i1, int i2 );
-void i4vec_print ( int n, int a[], string title );
-void i4vec_print_part ( int n, int a[], int max_print, string title );
-void r8mat_print ( int m, int n, double a[], string title );
+void i4vec_print ( int n, int a[], const std::string& title );
+void i4vec_print_part ( int n, int a[], int max_print, const std::string& title );
+void r8mat_print ( int m, int n, double a[], std::string title );
 void r8mat_print_some ( int m, int n, double a[], int ilo, int jlo, int ihi, 
-  int jhi, string title );
-void r8vec_print ( int n, double a[], string title );
-void r8vec_print_part ( int n, double a[], int max_print, string title );
+  int jhi, const std::string& title );
+void r8vec_print ( int n, double a[], const std::string& title );
+void r8vec_print_part ( int n, double a[], int max_print, const std::string& title );
 int s_len_trim ( char *s );
 char *s_substring ( char *s, int a, int b );
 void s_to_format ( char *s, int *r, char *code, int *w, int *m );
 void s_trim ( char *s );
 void timestamp ( );
+    
+}
+#endif
diff --exclude hb_file.hpp --exclude '*~' --exclude CVS --exclude Makefile --exclude '*.m' -wBuNr hb_io/hb_io_oct.cpp hb_io_patched/hb_io_oct.cpp
--- hb_io/hb_io_oct.cpp	1970-01-01 01:00:00.000000000 +0100
+++ hb_io_patched/hb_io_oct.cpp	2016-09-21 17:45:51.499569300 +0200
@@ -0,0 +1,146 @@
+/*
+  AUTHOR: Reinhard Resch <r.resch@secop.com>
+  Copyright (C) 2016(-2016) all rights reserved.
+
+  Licensing:
+
+  This code is distributed under the GNU LGPL license. 
+*/
+
+#include <exception>
+#include <cstdlib>
+#include <iostream>
+#include <fstream>
+#include <iomanip>
+#include <cmath>
+#include <ctime>
+
+using namespace std;
+
+#include <octave/oct.h>
+#include <dSparse.h>
+
+#include "hb_io.hpp"
+
+DEFUN_DLD(hb_file_read, args, nargout, "[A] = hb_file_read(filename)\n")
+{
+    octave_value_list retval;
+	
+    int nargin = args.length();
+
+    if ( nargin != 1 )
+    {
+        print_usage();
+        return retval;
+    }
+
+    if (!args(0).is_string())
+    {
+        error("filename must be a string");
+        return retval;
+    }
+
+    const string filename(args(0).string_value());
+    ifstream input(filename.c_str());
+
+    if (!input.good())
+    {
+        error("failed to open file %s", filename.c_str());
+        return retval;
+    }
+    
+    int *colptr = NULL;
+    double *exact = NULL;
+    double *guess = NULL;
+    int indcrd;
+    char *indfmt = NULL;
+    char *key = NULL;
+    char *mxtype = NULL;
+    int ncol;
+    int neltvl;
+    int nnzero;
+    int nrhs;
+    int nrhsix;
+    int nrow;
+    int ptrcrd;
+    char *ptrfmt = NULL;
+    int rhscrd;
+    char *rhsfmt = NULL;
+    int *rhsind = NULL;
+    int *rhsptr = NULL;
+    char *rhstyp = NULL;
+    double *rhsval = NULL;
+    double *rhsvec = NULL;
+    int *rowind = NULL;
+    char *title = NULL;
+    int totcrd;
+    int valcrd;
+    char *valfmt = NULL;
+    double *values = NULL;
+
+    try
+    {
+        hb_io::hb_file_read ( input, &title, &key, &totcrd, &ptrcrd, &indcrd, 
+                              &valcrd, &rhscrd, &mxtype, &nrow, &ncol, &nnzero, &neltvl, 
+                              &ptrfmt, &indfmt, &valfmt, &rhsfmt, &rhstyp, &nrhs, &nrhsix, 
+                              &colptr, &rowind, &values, &rhsval, &rhsptr, &rhsind, &rhsvec, 
+                              &guess, &exact );
+
+        SparseMatrix A(nrow, ncol, nnzero);
+
+        for (octave_idx_type j = 1; j <= ncol; ++j)
+        {
+            for (octave_idx_type i = colptr[j - 1]; i <= colptr[j] - 1; ++i)
+            {
+                A(rowind[i - 1] - 1, j - 1) = values[i - 1];
+            }
+        }
+
+        retval.append(A);
+    }
+    catch (const exception& err)
+    {    
+        error("exception in hb_file_read: %s", err.what());
+    }
+
+    input.close ( );
+
+    if ( colptr )
+    {
+        delete [] colptr;
+    }
+    if ( exact )
+    {
+        delete [] exact;
+    }
+    if ( guess )
+    {
+        delete [] guess;
+    }
+    if ( rhsind )
+    {
+        delete [] rhsind;
+    }
+    if ( rhsptr )
+    {
+        delete [] rhsptr;
+    }
+    if ( rhsval )
+    {
+        delete [] rhsval;
+    }
+    if ( rhsvec )
+    {
+        delete [] rhsvec;
+    }
+    if ( rowind )
+    {
+        delete [] rowind;
+    }
+    if ( values )
+    {
+        delete [] values;
+    }
+    
+    return retval;
+}
