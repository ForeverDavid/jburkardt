.md>

  <head>
    <title>
      SANDIA_RULES - title goes here.
    </title>
  </head>

  <body bgcolor="#EEEEEE" link="#CC0000" alink="#FF3300" vlink="#000055">

    <h1 align = "center">
      SANDIA_RULES <br> heading goes here.
    </h1>

    <hr>

    <p>
      <b>SANDIA_RULES</b>
      is a C++ (program/library) which
      (description goes here).
    </p>

    <h3 align = "center">
      Usage:
    </h3>

    <h3 align = "center">
      Licensing:
    </h3>

    <p>
      The computer code and data files described and made available on this
      web page are distributed under
      <a href = "../../txt/gnu_lgpl.txt">the GNU LGPL license.</a>
    </p>

    <h3 align = "center">
      Languages:
    </h3>

    <p>
      <b>SANDIA_RULES</b> is available in...
    </p>

    <h3 align = "center">
      Related Data and Programs:
    </h3>

    <h3 align = "center">
      Reference:
    </h3>

    <p>
      <ol>
        <li>
          
        </li>
      </ol>
    </p>

    <h3 align = "center">
      Source Code:
    </h3>

    <p>
      <ul>
        <li>
          <a href = "sandia_rules.cpp">sandia_rules.cpp</a>, the source code.
        </li>
        <li>
          <a href = "sandia_rules.hpp">sandia_rules.hpp</a>, the include file.
        </li>
        <li>
          <a href = "sandia_rules.sh">sandia_rules.sh</a>,
          BASH commands to compile the source code.
        </li>
      </ul>
    </p>

    <h3 align = "center">
      Examples and Tests:
    </h3>

    <p>
      <ul>
        <li>
          <a href = "sandia_rules_prb.cpp">sandia_rules_prb.cpp</a>,
          a sample calling program.
        </li>
        <li>
          <a href = "sandia_rules_prb.sh">sandia_rules_prb.sh</a>,
          BASH commands to compile and run the sample program.
        </li>
        <li>
          <a href = "sandia_rules_prb_output.txt">sandia_rules_prb_output.txt</a>,
          the output file.
        </li>
      </ul>
    </p>

    <h3 align = "center">
      List of Routines:
    </h3>

    <p>
      <ul>
        <li>
          <b>BINARY_VECTOR_NEXT</b> generates the next binary vector.
        </li>
        <li>
          <b>CCN_COMPUTE</b> computes a nested Clenshaw Curtis quadrature rule.
        </li>
        <li>
          <b>CCN_COMPUTE_NP</b> computes a nested Clenshaw Curtis quadrature rule.
        </li>
        <li>
          <b>CCN_COMPUTE_POINTS:</b> compute nested Clenshaw Curtis points.
        </li>
        <li>
          <b>CCN_COMPUTE_POINTS_NP:</b> nested Clenshaw Curtis quadrature points.
        </li>
        <li>
          <b>CCN_COMPUTE_WEIGHTS:</b> weights for nested Clenshaw Curtis rule.
        </li>
        <li>
          <b>CCN_COMPUTE_WEIGHTS_NP:</b> nested Clenshaw Curtis quadrature weights.
        </li>
        <li>
          <b>CHEBYSHEV1_COMPUTE</b> computes a Chebyshev type 1 quadrature rule.
        </li>
        <li>
          <b>CHEBYSHEV1_COMPUTE_NP</b> computes a Chebyshev type 1 quadrature rule.
        </li>
        <li>
          <b>CHEBYSHEV1_COMPUTE_POINTS</b> computes Chebyshev type 1 quadrature points.
        </li>
        <li>
          <b>CHEBYSHEV1_COMPUTE_POINTS_NP</b> computes Chebyshev type 1 quadrature points.
        </li>
        <li>
          <b>CHEBYSHEV1_COMPUTE_WEIGHTS</b> computes Chebyshev type 1 quadrature weights.
        </li>
        <li>
          <b>CHEBYSHEV1_COMPUTE_WEIGHTS_NP:</b> Chebyshev type 1 quadrature weights.
        </li>
        <li>
          <b>CHEBYSHEV1_INTEGRAL</b> evaluates a monomial Chebyshev type 1 integral.
        </li>
        <li>
          <b>CHEBYSHEV2_COMPUTE</b> computes a Chebyshev type 2 quadrature rule.
        </li>
        <li>
          <b>CHEBYSHEV2_COMPUTE_NP</b> computes a Chebyshev type 2 quadrature rule.
        </li>
        <li>
          <b>CHEBYSHEV2_COMPUTE_POINTS</b> computes Chebyshev type 2 quadrature points.
        </li>
        <li>
          <b>CHEBYSHEV2_COMPUTE_POINTS_NP</b> computes Chebyshev type 2 quadrature points.
        </li>
        <li>
          <b>CHEBYSHEV2_COMPUTE_WEIGHTS</b> computes Chebyshev type 2 quadrature weights.
        </li>
        <li>
          <b>CHEBYSHEV2_COMPUTE_WEIGHTS_NP:</b> Chebyshev type 2 quadrature weights.
        </li>
        <li>
          <b>CHEBYSHEV2_INTEGRAL</b> evaluates a monomial Chebyshev type 2 integral.
        </li>
        <li>
          <b>CLENSHAW_CURTIS_COMPUTE</b> computes a Clenshaw Curtis quadrature rule.
        </li>
        <li>
          <b>CLENSHAW_CURTIS_COMPUTE_NP</b> computes a Clenshaw Curtis quadrature rule.
        </li>
        <li>
          <b>CLENSHAW_CURTIS_COMPUTE_POINTS</b> computes Clenshaw Curtis quadrature points.
        </li>
        <li>
          <b>CLENSHAW_CURTIS_COMPUTE_POINTS_NP:</b> Clenshaw Curtis quadrature points.
        </li>
        <li>
          <b>CLENSHAW_CURTIS_COMPUTE_WEIGHTS</b> computes Clenshaw Curtis quadrature weights.
        </li>
        <li>
          <b>CLENSHAW_CURTIS_COMPUTE_WEIGHTS_NP:</b> Clenshaw Curtis quadrature weights.
        </li>
        <li>
          <b>COMP_NEXT</b> computes the compositions of the integer N into K parts.
        </li>
        <li>
          <b>CPU_TIME</b> reports the elapsed CPU time.
        </li>
        <li>
          <b>DIF_DERIV</b> computes the derivative of a polynomial in divided difference form.
        </li>
        <li>
          <b>DIF_SHIFT_X</b> replaces one abscissa of a divided difference table with a new one.
        </li>
        <li>
          <b>DIF_SHIFT_ZERO</b> shifts a divided difference table so that all abscissas are zero.
        </li>
        <li>
          <b>DIF_TO_R8POLY</b> converts a divided difference table to a standard polynomial.
        </li>
        <li>
          <b>FEJER2_COMPUTE</b> computes a Fejer type 2 rule.
        </li>
        <li>
          <b>FEJER2_COMPUTE_NP</b> computes a Fejer type 2 rule.
        </li>
        <li>
          <b>FEJER2_COMPUTE_POINTS</b> computes Fejer type 2 quadrature points.
        </li>
        <li>
          <b>FEJER2_COMPUTE_POINTS_NP</b> computes Fejer type 2 quadrature points.
        </li>
        <li>
          <b>FEJER2_COMPUTE_WEIGHTS</b> computes Fejer type 2 quadrature weights.
        </li>
        <li>
          <b>FEJER2_COMPUTE_WEIGHTS_NP</b> computes Fejer type 2 quadrature weights.
        </li>
        <li>
          <b>GEGENBAUER_COMPUTE</b> computes a Gegenbauer quadrature rule.
        </li>
        <li>
          <b>GEGENBAUER_COMPUTE_NP</b> computes a Gegenbauer quadrature rule.
        </li>
        <li>
          <b>GEGENBAUER_COMPUTE_POINTS</b> computes Gegenbauer quadrature points.
        </li>
        <li>
          <b>GEGENBAUER_COMPUTE_POINTS_NP</b> computes Gegenbauer quadrature points.
        </li>
        <li>
          <b>GEGENBAUER_COMPUTE_WEIGHTS</b> computes Gegenbauer quadrature weights.
        </li>
        <li>
          <b>GEGENBAUER_COMPUTE_WEIGHTS_NP</b> computes Gegenbauer quadrature weights.
        </li>
        <li>
          <b>GEGENBAUER_INTEGRAL</b> integrates a monomial with Gegenbauer weight.
        </li>
        <li>
          <b>GEGENBAUER_RECUR</b> evaluates a Gegenbauer polynomial.
        </li>
        <li>
          <b>GEGENBAUER_ROOT</b> improves an approximate root of a Gegenbauer polynomial.
        </li>
        <li>
          <b>GEN_HERMITE_COMPUTE</b> computes a generalized Gauss-Hermite quadrature rule.
        </li>
        <li>
          <b>GEN_HERMITE_COMPUTE_NP</b> computes a Generalized Hermite quadrature rule.
        </li>
        <li>
          <b>GEN_HERMITE_COMPUTE_POINTS</b> computes Generalized Hermite quadrature points.
        </li>
        <li>
          <b>GEN_HERMITE_COMPUTE_POINTS_NP:</b> Generalized Hermite quadrature points.
        </li>
        <li>
          <b>GEN_HERMITE_COMPUTE_WEIGHTS</b> computes Generalized Hermite quadrature weights.
        </li>
        <li>
          <b>GEN_HERMITE_COMPUTE_WEIGHTS_NP:</b> Generalized Hermite quadrature weights.
        </li>
        <li>
          <b>GEN_HERMITE_DR_COMPUTE</b> computes a Generalized Hermite quadrature rule.
        </li>
        <li>
          <b>GEN_HERMITE_INTEGRAL</b> evaluates a monomial Generalized Hermite integral.
        </li>
        <li>
          <b>GEN_LAGUERRE_COMPUTE:</b> generalized Gauss-Laguerre quadrature rule.
        </li>
        <li>
          <b>GEN_LAGUERRE_COMPUTE_NP</b> computes a Generalized Laguerre quadrature rule.
        </li>
        <li>
          <b>GEN_LAGUERRE_COMPUTE_POINTS:</b> Generalized Laguerre quadrature points.
        </li>
        <li>
          <b>GEN_LAGUERRE_COMPUTE_POINTS_NP:</b> Generalized Laguerre quadrature points.
        </li>
        <li>
          <b>GEN_LAGUERRE_COMPUTE_WEIGHTS:</b> Generalized Laguerre quadrature weights.
        </li>
        <li>
          <b>GEN_LAGUERRE_COMPUTE_WEIGHTS_NP:</b> Generalized Laguerre quadrature weights.
        </li>
        <li>
          <b>GEN_LAGUERRE_INTEGRAL</b> evaluates a monomial Generalized Laguerre integral.
        </li>
        <li>
          <b>GEN_LAGUERRE_SS_COMPUTE</b> computes a Generalized Laguerre quadrature rule.
        </li>
        <li>
          <b>GEN_LAGUERRE_SS_RECUR</b> evaluates a Generalized Laguerre polynomial.
        </li>
        <li>
          <b>GEN_LAGUERRE_SS_ROOT</b> improves a root of a Generalized Laguerre polynomial.
        </li>
        <li>
          <b>HC_COMPUTE_WEIGHTS_FROM_POINTS:</b> Hermite-Cubic weights, user-supplied points.
        </li>
        <li>
          <b>HCC_COMPUTE</b> computes a Hermite-Cubic-Chebyshev-Spacing quadrature rule.
        </li>
        <li>
          <b>HCC_COMPUTE_NP</b> computes a Hermite-Cubic-Chebyshev-Spacing quadrature rule.
        </li>
        <li>
          <b>HCC_COMPUTE_POINTS</b> computes Hermite-Cubic-Chebyshev-Spacing quadrature points.
        </li>
        <li>
          <b>HCC_COMPUTE_POINTS_NP:</b> Hermite-Cubic-Chebyshev-Spacing quadrature points.
        </li>
        <li>
          <b>HCC_COMPUTE_WEIGHTS:</b> Hermite-Cubic-Chebyshev-Spacing quadrature weights.
        </li>
        <li>
          <b>HCC_COMPUTE_WEIGHTS_NP:</b> Hermite-Cubic-Chebyshev-Spacing quadrature weights.
        </li>
        <li>
          <b>HCE_COMPUTE</b> computes a Hermite-Cubic-Equal-Spacing quadrature rule.
        </li>
        <li>
          <b>HCE_COMPUTE_NP</b> computes a Hermite-Cubic-Equal-Spacing quadrature rule.
        </li>
        <li>
          <b>HCE_COMPUTE_POINTS</b> computes Hermite-Cubic-Equal-Spacing quadrature points.
        </li>
        <li>
          <b>HCE_COMPUTE_POINTS_NP:</b> Hermite-Cubic-Equal-Spacing quadrature points.
        </li>
        <li>
          <b>HCE_COMPUTE_WEIGHTS:</b> Hermite-Cubic-Equal-Spacing quadrature weights.
        </li>
        <li>
          <b>HCE_COMPUTE_WEIGHTS_NP:</b> Hermite-Cubic-Equal-Spacing quadrature weights.
        </li>
        <li>
          <b>HERMITE_COMPUTE</b> computes a Gauss-Hermite quadrature rule.
        </li>
        <li>
          <b>HERMITE_COMPUTE_NP</b> computes a Hermite quadrature rule.
        </li>
        <li>
          <b>HERMITE_COMPUTE_POINTS</b> computes Hermite quadrature points.
        </li>
        <li>
          <b>HERMITE_COMPUTE_POINTS_NP</b> computes Hermite quadrature points.
        </li>
        <li>
          <b>HERMITE_COMPUTE_WEIGHTS</b> computes Hermite quadrature weights.
        </li>
        <li>
          <b>HERMITE_COMPUTE_WEIGHTS_NP</b> computes Hermite quadrature weights.
        </li>
        <li>
          <b>HERMITE_GENZ_KEISTER_LOOKUP</b> looks up a Genz-Keister Hermite rule.
        </li>
        <li>
          <b>HERMITE_GENZ_KEISTER_LOOKUP_POINTS</b> looks up Genz-Keister Hermite abscissas.
        </li>
        <li>
          <b>HERMITE_GENZ_KEISTER_LOOKUP_POINTS_NP</b> looks up Genz-Keister Hermite abscissas.
        </li>
        <li>
          <b>HERMITE_GENZ_KEISTER_LOOKUP_WEIGHTS</b> looks up Genz-Keister Hermite weights.
        </li>
        <li>
          <b>HERMITE_GENZ_KEISTER_LOOKUP_WEIGHTS_NP</b> looks up Genz-Keister Hermite weights.
        </li>
        <li>
          <b>HERMITE_GK18_LOOKUP_POINTS:</b> abscissas of a Hermite Genz-Keister 18 rule.
        </li>
        <li>
          <b>HERMITE_GK22_LOOKUP_POINTS</b> looks up Hermite Genz-Keister 22 points.
        </li>
        <li>
          <b>HERMITE_GK24_LOOKUP_POINTS</b> looks up Hermite Genz-Keister 24 points.
        </li>
        <li>
          <b>HERMITE_INTEGRAL</b> evaluates a monomial Hermite integral.
        </li>
        <li>
          <b>HERMITE_INTERPOLANT</b> sets up a divided difference table from Hermite data.
        </li>
        <li>
          <b>HERMITE_INTERPOLANT_RULE:</b> quadrature rule for a Hermite interpolant.
        </li>
        <li>
          <b>HERMITE_INTERPOLANT_VALUE</b> evaluates the Hermite interpolant polynomial.
        </li>
        <li>
          <b>HERMITE_LOOKUP</b> looks up abscissas and weights for Gauss-Hermite quadrature.
        </li>
        <li>
          <b>HERMITE_LOOKUP_POINTS</b> looks up abscissas for Hermite quadrature.
        </li>
        <li>
          <b>HERMITE_LOOKUP_WEIGHTS</b> looks up weights for Hermite quadrature.
        </li>
        <li>
          <b>HERMITE_SS_COMPUTE</b> computes a Hermite quadrature rule.
        </li>
        <li>
          <b>HERMITE_SS_RECUR</b> finds the value and derivative of a Hermite polynomial.
        </li>
        <li>
          <b>HERMITE_SS_ROOT</b> improves an approximate root of a Hermite polynomial.
        </li>
        <li>
          <b>I4_CHOOSE</b> computes the binomial coefficient C(N,K).
        </li>
        <li>
          <b>I4_LOG_2</b> returns the integer part of the logarithm base 2 of an I4.
        </li>
        <li>
          <b>I4_MAX</b> returns the maximum of two I4's.
        </li>
        <li>
          <b>I4_MIN</b> returns the minimum of two I4's.
        </li>
        <li>
          <b>I4_POWER</b> returns the value of I^J.
        </li>
        <li>
          <b>I4MAT_COPY</b> copies one I4MAT to another.
        </li>
        <li>
          <b>I4MAT_COPY_NEW</b> copies an I4MAT to a "new" I4MAT.
        </li>
        <li>
          <b>I4MAT_TRANSPOSE_PRINT</b> prints an I4MAT, transposed.
        </li>
        <li>
          <b>I4MAT_TRANSPOSE_PRINT_SOME</b> prints some of an I4MAT, transposed.
        </li>
        <li>
          <b>I4MAT_WRITE</b> writes an I4MAT file.
        </li>
        <li>
          <b>I4VEC_ADD_NEW</b> computes C = A + B for I4VEC's.
        </li>
        <li>
          <b>I4VEC_ANY_LT:</b> ( any ( A < B ) ) for I4VEC's.
        </li>
        <li>
          <b>I4VEC_COPY</b> copies an I4VEC.
        </li>
        <li>
          <b>I4VEC_COPY_NEW</b> copies an I4VEC to a "new" I4VEC.
        </li>
        <li>
          <b>I4VEC_MIN_MV</b> determines U(1:N) /\ V for vectors U and a single vector V.
        </li>
        <li>
          <b>I4VEC_PRINT</b> prints an I4VEC.
        </li>
        <li>
          <b>I4VEC_PRODUCT</b> multiplies the entries of an I4VEC.
        </li>
        <li>
          <b>I4VEC_SUM</b> sums the entries of an I4VEC.
        </li>
        <li>
          <b>I4VEC_ZERO</b> zeroes an I4VEC.
        </li>
        <li>
          <b>I4VEC_ZERO_NEW</b> creates and zeroes an I4VEC.
        </li>
        <li>
          <b>IMTQLX</b> diagonalizes a symmetric tridiagonal matrix.
        </li>
        <li>
          <b>JACOBI_COMPUTE:</b> Elhay-Kautsky method for Gauss-Jacobi quadrature rule.
        </li>
        <li>
          <b>JACOBI_COMPUTE_NP</b> computes a Jacobi quadrature rule.
        </li>
        <li>
          <b>JACOBI_COMPUTE_POINTS</b> computes Jacobi quadrature points.
        </li>
        <li>
          <b>JACOBI_COMPUTE_POINTS_NP</b> computes Jacobi quadrature points.
        </li>
        <li>
          <b>JACOBI_COMPUTE_WEIGHTS</b> computes Jacobi quadrature weights.
        </li>
        <li>
          <b>JACOBI_COMPUTE_WEIGHTS_NP</b> computes Jacobi quadrature weights.
        </li>
        <li>
          <b>JACOBI_INTEGRAL</b> integrates a monomial with Jacobi weight.
        </li>
        <li>
          <b>JACOBI_SS_COMPUTE</b> computes a Jacobi quadrature rule.
        </li>
        <li>
          <b>JACOBI_SS_RECUR</b> evaluates a Jacobi polynomial.
        </li>
        <li>
          <b>JACOBI_SS_ROOT</b> improves an approximate root of a Jacobi polynomial.
        </li>
        <li>
          <b>LAGUERRE_COMPUTE:</b> Laguerre quadrature rule by the Elhay-Kautsky method.
        </li>
        <li>
          <b>LAGUERRE_COMPUTE_NP</b> computes a Laguerre quadrature rule.
        </li>
        <li>
          <b>LAGUERRE_COMPUTE_POINTS</b> computes Laguerre quadrature points.
        </li>
        <li>
          <b>LAGUERRE_COMPUTE_POINTS_NP</b> computes Laguerre quadrature points.
        </li>
        <li>
          <b>LAGUERRE_COMPUTE_WEIGHTS</b> computes Laguerre quadrature weights.
        </li>
        <li>
          <b>LAGUERRE_COMPUTE_WEIGHTS_NP</b> computes Laguerre quadrature weights.
        </li>
        <li>
          <b>LAGUERRE_INTEGRAL</b> evaluates a monomial Laguerre integral.
        </li>
        <li>
          <b>LAGUERRE_LOOKUP</b> looks up abscissas and weights for Laguerre quadrature.
        </li>
        <li>
          <b>LAGUERRE_LOOKUP_POINTS</b> looks up abscissas for Laguerre quadrature.
        </li>
        <li>
          <b>LAGUERRE_LOOKUP_WEIGHTS</b> looks up weights for Laguerre quadrature.
        </li>
        <li>
          <b>LAGUERRE_SS_COMPUTE</b> computes a Laguerre quadrature rule.
        </li>
        <li>
          <b>LAGUERRE_SS_RECUR</b> evaluates a Laguerre polynomial.
        </li>
        <li>
          <b>LAGUERRE_SS_ROOT</b> improves a root of a Laguerre polynomial.
        </li>
        <li>
          <b>LEGENDRE_COMPUTE:</b> Legendre quadrature rule by the Elhay-Kautsky method.
        </li>
        <li>
          <b>LEGENDRE_COMPUTE_NP</b> computes a Legendre quadrature rule.
        </li>
        <li>
          <b>LEGENDRE_COMPUTE_POINTS</b> computes Legendre quadrature points.
        </li>
        <li>
          <b>LEGENDRE_COMPUTE_POINTS_NP</b> computes Legendre quadrature points.
        </li>
        <li>
          <b>LEGENDRE_COMPUTE_WEIGHTS</b> computes Legendre quadrature weights.
        </li>
        <li>
          <b>LEGENDRE_COMPUTE_WEIGHTS_NP</b> computes Legendre quadrature weights.
        </li>
        <li>
          <b>LEGENDRE_DR_COMPUTE</b> computes a Legendre quadrature rule.
        </li>
        <li>
          <b>LEGENDRE_INTEGRAL</b> evaluates a monomial Legendre integral.
        </li>
        <li>
          <b>LEGENDRE_LOOKUP</b> looks up abscissas and weights for Gauss-Legendre quadrature.
        </li>
        <li>
          <b>LEGENDRE_LOOKUP_POINTS</b> looks up abscissas for Gauss-Legendre quadrature.
        </li>
        <li>
          <b>LEGENDRE_LOOKUP_WEIGHTS</b> looks up weights for Gauss-Legendre quadrature.
        </li>
        <li>
          <b>LEGENDRE_ZEROS</b> returns the zeros of the Legendre polynomial of degree N.
        </li>
        <li>
          <b>LEVEL_GROWTH_TO_ORDER:</b> convert Level and Growth to Order.
        </li>
        <li>
          <b>LEVEL_TO_ORDER_DEFAULT:</b> default growth.
        </li>
        <li>
          <b>LEVEL_TO_ORDER_EXPONENTIAL:</b> exponential growth.
        </li>
        <li>
          <b>LEVEL_TO_ORDER_EXPONENTIAL_SLOW:</b> slow exponential growth;
        </li>
        <li>
          <b>LEVEL_TO_ORDER_LINEAR:</b> linear growth.
        </li>
        <li>
          <b>LEVEL_TO_ORDER_EXP_CC</b> is used for Clenshaw-Curtis type rules.
        </li>
        <li>
          <b>LEVEL_TO_ORDER_EXP_F2</b> is used for Fejer 2 type rules.
        </li>
        <li>
          <b>LEVEL_TO_ORDER_EXP_GAUSS</b> is used for Gauss type rules.
        </li>
        <li>
          <b>LEVEL_TO_ORDER_EXP_GP</b> is used for Gauss-Patterson type rules.
        </li>
        <li>
          <b>LEVEL_TO_ORDER_EXP_HGK</b> is used for Hermite Genz-Keister type rules.
        </li>
        <li>
          <b>LEVEL_TO_ORDER_LINEAR_NN</b> is used for non-nested Gauss type rules.
        </li>
        <li>
          <b>LEVEL_TO_ORDER_LINEAR_WN</b> is used for weakly-nested Gauss type rules.
        </li>
        <li>
          <b>NC_COMPUTE</b> computes a Newton-Cotes quadrature rule.
        </li>
        <li>
          <b>NC_COMPUTE_NEW</b> computes a Newton-Cotes quadrature rule.
        </li>
        <li>
          <b>NCC_COMPUTE_POINTS:</b> points of a Newton-Cotes Closed quadrature rule.
        </li>
        <li>
          <b>NCC_COMPUTE_WEIGHTS:</b> weights of a Newton-Cotes Closed quadrature rule.
        </li>
        <li>
          <b>NCO_COMPUTE_POINTS:</b> points for a Newton-Cotes Open quadrature rule.
        </li>
        <li>
          <b>NCO_COMPUTE_WEIGHTS:</b> weights for a Newton-Cotes Open quadrature rule.
        </li>
        <li>
          <b>NCOH_COMPUTE_POINTS</b> computes points for a Newton-Cotes "open half" quadrature rule.
        </li>
        <li>
          <b>NCOH_COMPUTE_WEIGHTS</b> computes weights for a Newton-Cotes "open half" quadrature rule.
        </li>
        <li>
          <b>PATTERSON_LOOKUP</b> looks up Patterson quadrature points and weights.
        </li>
        <li>
          <b>PATTERSON_LOOKUP_POINTS</b> looks up Patterson quadrature points.
        </li>
        <li>
          <b>PATTERSON_LOOKUP_POINTS_NP</b> looks up Patterson quadrature points.
        </li>
        <li>
          <b>PATTERSON_LOOKUP_WEIGHTS</b> looks up Patterson quadrature weights.
        </li>
        <li>
          <b>PATTERSON_LOOKUP_WEIGHTS_NP</b> looks up Patterson quadrature weights.
        </li>
        <li>
          <b>POINT_RADIAL_TOL_UNIQUE_COUNT</b> counts the tolerably unique points.
        </li>
        <li>
          <b>POINT_RADIAL_TOL_UNIQUE_COUNT_INC1</b> counts the tolerably unique points.
        </li>
        <li>
          <b>POINT_RADIAL_TOL_UNIQUE_COUNT_INC2</b> counts the tolerably unique points.
        </li>
        <li>
          <b>POINT_RADIAL_TOL_UNIQUE_INDEX</b> indexes the tolerably unique points.
        </li>
        <li>
          <b>POINT_RADIAL_TOL_UNIQUE_INDEX_INC1</b> indexes the tolerably unique points.
        </li>
        <li>
          <b>POINT_RADIAL_TOL_UNIQUE_INDEX_INC2</b> indexes unique temporary points.
        </li>
        <li>
          <b>POINT_RADIAL_TOL_UNIQUE_INDEX_INC3</b> merges index data.
        </li>
        <li>
          <b>POINT_UNIQUE_INDEX</b> indexes unique points.
        </li>
        <li>
          <b>PRODUCT_MIXED_WEIGHT</b> computes the weights of a mixed product rule.
        </li>
        <li>
          <b>R8_ABS</b> returns the absolute value of an R8.
        </li>
        <li>
          <b>R8_CEILING</b> rounds an R8 "up" (towards +oo) to the next integer.
        </li>
        <li>
          <b>R8_CHOOSE</b> computes the binomial coefficient C(N,K) as an R8.
        </li>
        <li>
          <b>R8_EPSILON</b> returns the R8 roundoff unit.
        </li>
        <li>
          <b>R8_FACTORIAL</b> computes the factorial of N.
        </li>
        <li>
          <b>R8_FACTORIAL2</b> computes the double factorial function.
        </li>
        <li>
          <b>R8_FLOOR</b> rounds an R8 "down" (towards -infinity) to the next integer.
        </li>
        <li>
          <b>R8_GAMMA</b> evaluates Gamma(X) for a real argument.
        </li>
        <li>
          <b>R8_HUGE</b> returns a "huge" R8.
        </li>
        <li>
          <b>R8_HYPER_2F1</b> evaluates the hypergeometric function 2F1(A,B,C,X).
        </li>
        <li>
          <b>R8_MAX</b> returns the maximum of two R8's.
        </li>
        <li>
          <b>R8_MIN</b> returns the minimum of two R8's.
        </li>
        <li>
          <b>R8_MOP</b> returns the I-th power of -1 as an R8 value.
        </li>
        <li>
          <b>R8_PSI</b> evaluates the function Psi(X).
        </li>
        <li>
          <b>R8_SIGN</b> returns the sign of an R8.
        </li>
        <li>
          <b>R8COL_COMPARE</b> compares two columns in an R8COL.
        </li>
        <li>
          <b>R8COL_SORT_HEAP_A</b> ascending heapsorts an R8COL.
        </li>
        <li>
          <b>R8COL_SORT_HEAP_INDEX_A</b> does an indexed heap ascending sort of an R8COL.
        </li>
        <li>
          <b>R8COL_SORTED_UNIQUE_COUNT</b> counts unique elements in a sorted R8COL.
        </li>
        <li>
          <b>R8COL_SWAP</b> swaps columns J1 and J2 of an R8COL.
        </li>
        <li>
          <b>R8COL_TOL_UNDEX</b> indexes tolerably unique entries of an R8COL.
        </li>
        <li>
          <b>R8COL_TOL_UNIQUE_COUNT</b> counts tolerably unique entries in an R8COL.
        </li>
        <li>
          <b>R8COL_UNDEX</b> returns unique sorted indexes for an R8COL.
        </li>
        <li>
          <b>R8COL_UNIQUE_INDEX</b> indexes the first occurrence of values in an R8COL.
        </li>
        <li>
          <b>R8MAT_TRANSPOSE_PRINT</b> prints an R8MAT, transposed.
        </li>
        <li>
          <b>R8MAT_TRANSPOSE_PRINT_SOME</b> prints some of an R8MAT, transposed.
        </li>
        <li>
          <b>R8MAT_WRITE</b> writes an R8MAT file.
        </li>
        <li>
          <b>R8POLY_ANT_VAL</b> evaluates the antiderivative of an R8POLY in standard form.
        </li>
        <li>
          <b>R8VEC_CHEBYSHEV_NEW</b> creates a vector of Chebyshev spaced values.
        </li>
        <li>
          <b>R8VEC_COMPARE</b> compares two R8VEC's.
        </li>
        <li>
          <b>R8VEC_COPY</b> copies an R8VEC.
        </li>
        <li>
          <b>R8VEC_COPY_NEW</b> copies an R8VEC to a "new" R8VEC.
        </li>
        <li>
          <b>R8VEC_DIFF_NORM_LI</b> returns the L-oo norm of the difference of R8VEC's.
        </li>
        <li>
          <b>R8VEC_DIRECT_PRODUCT2</b> creates a direct product of R8VEC's.
        </li>
        <li>
          <b>R8VEC_DOT_PRODUCT</b> computes the dot product of a pair of R8VEC's.
        </li>
        <li>
          <b>R8VEC_I4VEC_DOT_PRODUCT</b> computes the dot product of an R8VEC and an I4VEC.
        </li>
        <li>
          <b>R8VEC_INDEX_SORTED_RANGE:</b> search index sorted vector for elements in a range.
        </li>
        <li>
          <b>R8VEC_INDEXED_HEAP_D</b> creates a descending heap from an indexed R8VEC.
        </li>
        <li>
          <b>R8VEC_INDEXED_HEAP_D_EXTRACT:</b> extract from heap descending indexed R8VEC.
        </li>
        <li>
          <b>R8VEC_INDEXED_HEAP_D_INSERT:</b> insert value into heap descending indexed R8VEC.
        </li>
        <li>
          <b>R8VEC_INDEXED_HEAP_D_MAX:</b> maximum value in heap descending indexed R8VEC.
        </li>
        <li>
          <b>R8VEC_LEGENDRE_NEW</b> creates a vector of Chebyshev spaced values.
        </li>
        <li>
          <b>R8VEC_LINSPACE_NEW</b> creates a vector of linearly spaced values.
        </li>
        <li>
          <b>R8VEC_MIN</b> returns the value of the minimum element in an R8VEC.
        </li>
        <li>
          <b>R8VEC_MIN_POS</b> returns the minimum positive value of an R8VEC.
        </li>
        <li>
          <b>R8VEC_PRINT</b> prints an R8VEC.
        </li>
        <li>
          <b>R8VEC_SCALE</b> multiples an R8VEC by a scale factor.
        </li>
        <li>
          <b>R8VEC_SORT_HEAP_INDEX_A</b> does an indexed heap ascending sort of an R8VEC
        </li>
        <li>
          <b>R8VEC_SORT_HEAP_INDEX_A_NEW</b> does an indexed heap ascending sort of an R8VEC
        </li>
        <li>
          <b>R8VEC_STUTTER</b> makes a "stuttering" copy of an R8VEC.
        </li>
        <li>
          <b>R8VEC_SUM</b> returns the sum of an R8VEC.
        </li>
        <li>
          <b>R8VEC_UNIFORM_01</b> returns a unit pseudorandom R8VEC.
        </li>
        <li>
          <b>R8VEC_UNIFORM_01_NEW</b> returns a new unit pseudorandom R8VEC.
        </li>
        <li>
          <b>R8VEC_ZERO</b> zeroes an R8VEC.
        </li>
        <li>
          <b>SORT_HEAP_EXTERNAL</b> externally sorts a list of items into ascending order.
        </li>
        <li>
          <b>TIMESTAMP</b> prints the current YMDHMS date as a time stamp.
        </li>
        <li>
          <b>VEC_COLEX_NEXT3</b> generates vectors in colex order.
        </li>
      </ul>
    </p>

    <p>
      You can go up one level to <a href = "../cpp_src.md">
      the C++ source codes</a>.
    </p>

    <hr>

    <i>
      Last revised on Fri Jan  6 10:41:17 2012
    </i>

    <!-- John Burkardt -->

  </body>

  <!-- Initial HTML skeleton created by HTMLINDEX. -->

<.md>
